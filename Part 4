import pandas as pd
import numpy as np

def blight_model():
    from sklearn.neural_network import MLPClassifier
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.tree import DecisionTreeClassifier
    from datetime import datetime
    
    
    def time_gap(hearing_date_str, ticket_issued_date_str):
        if not hearing_date_str or type(hearing_date_str)!=str: return 73
        hearing_date = datetime.strptime(hearing_date_str, "%Y-%m-%d %H:%M:%S")
        ticket_issued_date = datetime.strptime(ticket_issued_date_str, "%Y-%m-%d %H:%M:%S")
        gap = hearing_date - ticket_issued_date
        return gap.days
    traind = pd.read_csv('train.csv', encoding = 'ISO-8859-1')
    testd = pd.read_csv('test.csv')
    address =  pd.read_csv('addresses.csv')
    latlons = pd.read_csv('latlons.csv')
    
    
    traind = traind[(traind['compliance'] == 0) | (traind['compliance'] == 1)]
    address = address.set_index('address').join(latlons.set_index('address'), how='left')
    traind = traind.set_index('ticket_id').join(address.set_index('ticket_id'))
    testd = testd.set_index('ticket_id').join(address.set_index('ticket_id'))
    traind = traind[~traind['hearing_date'].isnull()]
    traind['time_gap'] = traind.apply(lambda row: time_gap(row['hearing_date'], row['ticket_issued_date']), axis=1)
    testd['time_gap'] = testd.apply(lambda row: time_gap(row['hearing_date'], row['ticket_issued_date']), axis=1)
    feature_to_be_splitted = ['agency_name', 'state', 'disposition']
    traind.lat.fillna(method='pad', inplace=True)
    traind.lon.fillna(method='pad', inplace=True)
    traind.state.fillna(method='pad', inplace=True)

    testd.lat.fillna(method='pad', inplace=True)
    testd.lon.fillna(method='pad', inplace=True)
    testd.state.fillna(method='pad', inplace=True)
    
    
    traind = pd.get_dummies(traind, columns=feature_to_be_splitted)
    testd = pd.get_dummies(testd, columns=feature_to_be_splitted)
    listremove_train = [
        'balance_due',
        'collection_status',
        'compliance_detail',
        'payment_amount',
        'payment_date',
        'payment_status'
    ]
    listremove_all = ['fine_amount', 'violator_name', 'zip_code', 'country', 'city',
                          'inspector_name', 'violation_street_number', 'violation_street_name',
                          'violation_zip_code', 'violation_description',
                          'mailing_address_str_number', 'mailing_address_str_name',
                          'non_us_str_code',
                          'ticket_issued_date', 'hearing_date', 'grafitti_status', 'violation_code']
    traind.drop(listremove_train, axis=1, inplace=True)
    traind.drop(listremove_all, axis=1, inplace=True)
    testd.drop(listemove_all, axis=1, inplace=True)
    train_features = traind.columns.drop('compliance')
    train_features_set = set(train_features)
    
    for feature in set(train_features):
        if feature not in testd:
            train_features_set.remove(feature)
    train_features = list(train_features_set)
    
    X_train = traind[train_features]
    y_train = traind.compliance
    X_test = testd[train_features]
    
    scaler = MinMaxScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    clf = MLPClassifier(hidden_layer_sizes = [100, 10], alpha = 5,
                       random_state = 0, solver='lbfgs', verbose=0)
    clf.fit(X_train_scaled, y_train)

    test_proba = clf.predict_proba(X_test_scaled)[:,1]

    
    test_dd = pd.read_csv('test.csv', encoding = "ISO-8859-1")
    testdd['compliance'] = test_proba
    testdd.set_index('ticket_id', inplace=True)
    
    
    
    return testdd.compliance

blight_model()
